class Solution {
    public int numBusesToDestination(int[][] routes, int S, int T) {
        
        if(S == T) {
            return 0;
        }
        
        HashMap<Integer,ArrayList<Integer>> hm = new HashMap<Integer,ArrayList<Integer>>();
        HashSet<Integer> visitedNodes = new HashSet<Integer>();
        ArrayList<Integer> getStations =  new ArrayList<Integer>();
        Queue<Integer> currentRoute = new LinkedList<Integer>();
        
        int i, j, k, size=0, countRoute=1, node;
        
        for(i=0; i<routes.length; i++) {
            for(j=0; j<routes[i].length; j++) {
                
                if(!hm.containsKey(routes[i][j])) {
                    getStations.clear();
                    getStations.add(i);
                    hm.put(routes[i][j],new ArrayList<Integer>(getStations));
                }
                else {
                    getStations.clear();
                    getStations = hm.get(routes[i][j]);
                    getStations.add(i);
                    hm.put(routes[i][j],new ArrayList<Integer>(getStations));
                    
                }
            }
        }
    
       
        getStations.clear();
        getStations = hm.get(S);
         
          for(i=0; i<getStations.size(); i++) {
              currentRoute.add(getStations.get(i));
              visitedNodes.add(getStations.get(i));
          }
        
        while(currentRoute.size()>0) {
                
            size = currentRoute.size();
            for(i=0; i<size; i++) {
                
                node = currentRoute.remove();
                
                for(j=0; j<routes[node].length; j++) {
                    
                    if(routes[node][j] == T) {
                        return countRoute;
                    }
                    
                    getStations.clear();
                    getStations = hm.get(routes[node][j]);
                    for(k=0; k<getStations.size(); k++) {
                        
                        if(!visitedNodes.contains(getStations.get(k))) {
                            currentRoute.add(getStations.get(k));
                            visitedNodes.add(getStations.get(k));
                        }
                        
                    }
                    
                }
            }
            ++countRoute;
        }
        
        
        return -1;
            
    }
}

